// Lab 4.5 - More on points

println("Lab 4.5 - More on points");

Point point = new Point();
point.x = 4.0;
point.y = 5.0;

Point pointTwo = new Point();
pointTwo.x = 2.0;
pointTwo.y = 2.0;

// Test distanceTo method
double distance = point.distanceTo(pointTwo);
println("distanceTo: " + distance);

// Test distanceToOrigin method
double distanceToOrigin = point.distanceToOrigin();
println("distanceToOrigin: " + distanceToOrigin);

// Test moveTo method
point.moveTo(50, 50);
println("Point x is now: " + point.x);
println("Point y is now: " + point.y);

// Test moveTo method
Point temp = new Point();
temp.x = 4;
temp.y = 5;
point.moveTo(temp);
println("Point x is now: " + point.x);
println("Point y is now: " + point.y);

// Test clonePoint method
Point cloned = point.clonePoint();
println("The x value of the cloned point is: " + cloned.x);
println("The y value of the cloned point is: " + cloned.y);

// Test opposite method
Point opposite = point.opposite();
println("The x value of the opposite point is: " + opposite.x);
println("The y value of the opposite point is: " + opposite.y);

println("Goodbye.");

class Point {
    double x;
    double y;

    double distanceTo(Point point) {
        double dist = (this.x - point.x) * (this.x - point.x) + (this.y - point.y) * (this.y - point.y);
        return dist;
    }

    double distanceToOrigin() {
        Point origin = new Point();
        origin.x = 0;
        origin.y = 0;

        double dist = this.distanceTo(origin);
        return dist;
    }

    void moveTo(double x, double y) {
        this.x = x;
        this.y = y;
    }

    void moveTo(Point point) {
        this.x = point.x;
        this.y = point.y;
    }

    // Had to name this clonePoint because it wouldn't let me override
    // the clone() method in the object because it's visibility is protected
    Point clonePoint() {
        Point point = new Point();
        point.x = this.x;
        point.y = this.y;
        return point;
    }

    Point opposite() {
        Point cloned = this.clonePoint();
        cloned.x *= -1;
        cloned.y *= -1;

        return cloned;
    }
}